<?php
/**
 * @file
 * Provides integration of the jQuery DataTables plugin
 */

module_load_include('inc', 'datatables', 'datatables.serverside');
function datatables_perm(){
    return array('ajax datatables');
}

function datatables_menu(){
    $items['datatables/%/%'] = array(
        'page callback' => 'datatables_serverside',
        'page arguments' => array(1,2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
    );

    $items['datatables/%/%/%'] = array(
        'page callback' => 'datatables_serverside',
        'page arguments' => array(1,2,3),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Implements hook_theme().
 */
function datatables_theme() {
    return array(
        'datatable' => array(
            'variables' => array('header' => NULL, 'rows' => NULL, 'attributes' => NULL, 'caption' => NULL),
        ),
    );
}

/**
 * Implements hook_library().
 */
function datatables_library() {
    $libraries = array();

    /**
     * Locate dataTables JS library
    */
    $lib_path = NULL;
    if (file_exists(drupal_get_path('module', 'datatables') . '/dataTables/media/js/jquery.dataTables.js')) {
        $lib_path = drupal_get_path('module', 'datatables') . '/dataTables';
    }elseif (module_exists('libraries') && file_exists(libraries_get_path('datatables') . '/media/js/jquery.dataTables.js')) {
        $lib_path = libraries_get_path('datatables');
    }

    if (!empty($lib_path)) {
        $libraries['datatables'] = array(
            'title' => 'DataTables',
            'website' => 'http://datatables.net/',
            'version' => '1.9',
            'js' => array(
                $lib_path . '/media/js/jquery.dataTables.js' => array(),
                drupal_get_path('module', 'datatables') . '/js/datatables.js' => array(),
                drupal_get_path('module', 'datatables') . '/js/DT_bootstrap.js' => array(),
            ),
            'css' => array(
                $lib_path . '/media/css/demo_table.css' => array(),
            ),
        );
    }

    return $libraries;
}

/**
 * Implements hook_views_api().
 */
function datatables_views_api() {
    return array(
        'api' => 3.0,
        'path' => drupal_get_path('module', 'datatables') . '/views',
    );
}

/**
 * Return a themed DataTable.
 *
 * This function takes the same parameters as theme_table, but also allows the
 * inclusion of DataTable specific information in the $header and $attributes
 * parameters in order to configure a DataTable.  If an id is not set in the
 * $attributes paramater, a unique one is generated.
 *
 * To set features and options for the DataTable, add
 * $parameters['datatable_options'] as an associative array.
 * For example:
 * @code
 *   $parameters['datatables_options'] = array(
 *     'bFilter'   => FALSE,  // Disable filtering of data.
 *     'bInfo'     => TRUE,   // Show the table information display.
 *     'aaSorting' => array(  // Sort by 3rd column first, and then 4th column.
 *        array(2, 'asc'),
 *        array(3, 'desc'),
 *      ),
 *   );
 * @endcode
 * See http://datatables.net/usage/features and
 * http://datatables.net/usage/options for a full list of features and options.
 *
 * To enable column specific options, set the datatable_options for each of the
 * columns in the $header parameter.
 * For example:
 * @code
 *   $header = array(
 *     array(
 *       'data' => t('Column 1'),
 *       'datatable_options' => array(
 *        'bSortable' => TRUE,  // Enable sorting on this column.
 *       ),
 *     ),
 *     array(
 *       'data' => t('Column 2'),
 *       'datatable_options' => array(
 *         'bSearchable' => FALSE, // Disable filtering on this column.
 *       ),
 *     ),
 *   );
 * @endcode
 * Note: if the aaColumns option is enabled in $parameters['datatable_options'],
 * then all datatable_options in the $header parameter will be ignored, since
 * the parameters will override column options.  See
 * http://datatables.net/usage/columns for a full list of column options.
 *
 * @param $header
 *   An array containing the table headers. Each element of the array can be
 *   either a localized string or an associative array with the following keys:
 *   - "data": The localized title of the table column.
 *   - Any HTML attributes, such as "colspan", to apply to the column header
 *     cell.
 *   - "datatable_options": An associative array containing DataTable column
 *     specific features/options.
 * @param $rows
 *   An array of table rows. Every row is an array of cells, or an associative
 *   array with the following keys:
 *   - "data": an array of cells
 *   - Any HTML attributes, such as "class", to apply to the table row.
 *
 *   Each cell can be either a string or an associative array with the following keys:
 *   - "data": The string to display in the table cell.
 *   - "header": Indicates this cell is a header.
 *   - Any HTML attributes, such as "colspan", to apply to the table cell.
 *
 *   Here's an example for $rows:
 *   @code
 *   $rows = array(
 *     // Simple row
 *     array(
 *       'Cell 1', 'Cell 2', 'Cell 3'
 *     ),
 *     // Row with attributes on the row and some of its cells.
 *     array(
 *       'data' => array('Cell 1', array('data' => 'Cell 2', 'colspan' => 2)), 'class' => 'funky'
 *     )
 *   );
 *   @endcode
 *
 * @param $attributes
 *   An array of HTML attributes to apply to the table tag.  If the
 *   datatable_options is set, then those options are passed to the
 *   dataTable constructor.
 * @param $caption
 *   A localized string to use for the <caption> tag.
 * @return
 *   An HTML string representing the table.
 * @see theme_table()
 */
function theme_datatable($variables) {
    $header =& $variables['header'];
    $attributes =& $variables['attributes'];

    if (isset($variables['rows'])) {
        $datatable_options = $attributes['datatable_options'];

        /**
         * Set dataTables columns
        */
        if (!isset($datatable_options['aoColumns'])) {
            foreach ($header as $key => $cell) {
                $datatable_options['aoColumns'][] = $cell['datatable_options'];
                unset($header[$key]['datatable_options']);
            }
        }

        $datatable_options['bServerSide'] = TRUE;
        $datatable_options['bProcessing'] = TRUE;

        /**
         * Set table unique ID
        */
        if (!isset($attributes['id'])) {
            $attributes['id'] = _datatables_get_id();
        }

        drupal_add_library('datatables', 'datatables');
        drupal_add_js(array('datatables' => array('#' . $attributes['id'] => $datatable_options)), 'setting');
        unset($attributes['datatable_options']);
    }

    return theme('table', $variables);
}

/**
 * Display a view as a DataTable style.
 */
function template_preprocess_datatables_view(&$vars) {
    template_preprocess_views_view_table($vars);

    if (!$vars['rows']) {
        return;
    }

    $view = $vars['view'];

    $options = $view->style_plugin->options;
    $handler = $view->style_plugin;

    $fields = &$view->field;
    $columns = $handler->sanitize_columns($options['columns'], $fields);

    $sortable_columns = array();
    $position = 0;
    foreach ($columns as $field => $column) {
        $column_options = NULL;

        if (isset($options['hidden_columns'][$field])) {
            switch ($options['hidden_columns'][$field]) {
                case 'expandable':
                    $datatable_options['bExpandable'] = TRUE;
                case 'hidden':
                    $column_options['bVisible'] = FALSE;
            }
        }

        /**
         * Render header labels
        */
        if ($field == $column && empty($fields[$field]->options['exclude'])) {
            /**
             * Override clicksort head defined in template_preprocess_views_view_table()
            */
            $vars['header'][$field] = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');

            if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
                $column_options['bSortable'] = FALSE;
            }else {
                /**
                 * Attempt to autodetect the type of field in order to handle sorting correctly
                */
                $column_options['sName'] = strtolower($fields[$field]->label());
                array_push($sortable_columns, $field);

                if ((property_exists($fields[$field], 'last_render')) && drupal_strlen($fields[$field]->last_render) != drupal_strlen(strip_tags($fields[$field]->last_render))) {
                    $column_options['sType'] = 'html';
                }elseif ((property_exists($fields[$field], 'last_render')) && is_numeric($fields[$field]->last_render)) {
                    $column_options['sType'] = 'numeric';
                }elseif ($fields[$field] instanceof views_handler_field_date) {
                    $column_options['sType'] = 'date';
                }

                $column_options['bSortable'] = TRUE;
            }

            $datatable_options['aoColumns'][] = $column_options;
            $datatable_options['aoColumnHeaders'][] = $vars['header'][$field];
        }

        /**
         * Set default sort order
        */
        if ($options['default'] == $field) {
            $datatable_options['aaSorting'] = array(array($position, $options['info'][$field]['default_sort_order']));
        }

        $position++;
    }

    $datatable_options['bInfo'] = $options['elements']['table_info'];
    $datatable_options['bFilter'] = $options['elements']['search_box'];
    $datatable_options['bStateSave'] = $options['elements']['save_state'];
    $datatable_options['bLengthChange'] = $options['pages']['length_change'];
    $datatable_options['bTableTools'] = $options['elements']['enable_tabletools'];

    if($datatable_options['bTableTools'] == TRUE) {
        $path = drupal_get_path('module', 'datatables');
        drupal_add_js("$path/dataTables/extras/TableTools/media/js/TableTools.js");
        drupal_add_js("$path/dataTables/extras/TableTools/media/js/ZeroClipboard.js");
        drupal_add_css("$path/dataTables/extras/TableTools/media/css/TableTools.css");
        $datatable_options['oTableTools'] = array( 'sSwfPath' => "/$path/dataTables/extras/TableTools/media/swf/copy_csv_xls_pdf.swf");
    }

    if ($options['pages']['items_per_page_options']) {
        $menu_options = explode(', ', $options['pages']['items_per_page_options']);
        $aLengthMenuLabels = array();
        $aLengthMenuValues = array();

        foreach ($menu_options as $number) {
            if ($number == 'All') {
                $label = t('All');
                $value = $view->total_rows;
            }else {
                $label = $value = $number;
            }

            array_push($aLengthMenuLabels, $label);
            array_push($aLengthMenuValues, $value);
        }

        $datatable_options['aLengthMenu'] = array($aLengthMenuValues, $aLengthMenuLabels);
    }

    $datatable_options['iDisplayLength'] = (int) $options['pages']['display_length'];
    $datatable_options['bServerSide'] = $options['pages']['server_side'];
    $datatable_options['bProcessing'] = $options['pages']['processing'];


    if ($options['layout']['themeroller']) {
        $datatable_options['bJQueryUI'] = TRUE;
    }

    /**
     * Pass sDom parameter if specified
    */
    if ($options['layout']['sdom']) {
        $datatable_options['sDom'] = $options['layout']['sdom'];
    }

    $datatable_options['oLanguage'] = array('oPaginate' => array('sFirst' => t('First'),
                                                                 'sLast' => t('Last'),
                                                                 'sNext' => t('Next'),
                                                                 'sPrevious' => t('Previous')),
                                            'sInfo' => t('Showing _TOTAL_ items (_START_ to _END_)'),
                                            'sInfoFiltered' => t('- filtering from _MAX_ records'),
                                            'sLengthMenu' => t('Display _MENU_ records'),
                                            'sLoadingRecords' => t('Please wait - loading...'),
                                            'sInfoThousands' => "'",
                                            'sInfoPostFix' => '',
                                            'sInfoEmpty' => t('No entries to show'),
                                            'sProcessing' => t('Loading entries...'),
                                            'sSearch' => t('Search').':',
                                            'sZeroRecords' => t('No entries to display'),
                                           );

    $datatable_options['bAutoWidth'] = $options['layout']['autowidth'];

    switch ($options['pages']['pagination_style']) {
        case 'full_numbers':
            $datatable_options['sPaginationType'] = 'full_numbers';
            break;

        case 'no_pagination':
            $datatable_options['bPaginate'] = FALSE;
            break;

        default:
        break;
    }

    if($datatable_options['bServerSide'] == TRUE){
        $datatable_options['bProcessing'] = $options['pages']['processing'];
        $query = '';

        if (isset($_GET) && (!empty($_GET))) {
            foreach ($_GET as $filter => $value) {
                if ($filter !== 'q') {
                    $query .= '&' . $filter . '=' . $value;
                }
            }
        }

        $sortable_param = http_build_query(array('sortable' => $sortable_columns));

        $datatable_options['sAjaxSource'] = '/datatables/' . $view->name . '/' . $view->current_display . '/' .base64_encode(implode('|',$view->args)) . '?1=1' . $query . '&' . $sortable_param;
    }

    $vars['id'] = _datatables_get_id();

    drupal_add_library('datatables', 'datatables');
    drupal_add_js(array('datatables' => array('#' . $vars['id'] => $datatable_options)), array('type' => 'setting', 'scope' => JS_DEFAULT));
}

/**
 * Implements hook_views_query_alter().
 *
 * If a search query string is specifield, join all fields and apply a free text search.
*/
function datatables_views_query_alter(&$view, &$query) {
    $field_to_avoid = array('edit_node', 'delete_node');
    if (($view->style_plugin->definition['name'] == 'datatables') && (in_array('sSearch', array_keys($_GET)))) {
        $string = trim($_GET['sSearch']);
        $group = count($query->where) + 1;

        if (!empty($string)) {
            foreach ($view->field as $field_name => $field) {
                if (!in_array($field_name, $field_to_avoid)) {
                    if (($field_name != 'title')) {
                        $join = new views_join();
                        $join->table = $field->table;
                        $join->field = 'entity_id';
                        $join->left_table = 'node';
                        $join->left_field = 'nid';
                        $join->type = 'LEFT';
                        $query->add_relationship($field->table, $join, 'node', null);
                        $query->add_where($group, $field->table . '.' . $field->real_field, '%' . db_like($string) . '%', 'LIKE');
                    }else {
                        $query->add_where($group, $field->table . '.' . $field->real_field, '%' . db_like($string) . '%', 'LIKE');
                    }
                }
            }
        }

        $query->where[$group]['type'] = "OR";
        $query->distinct = TRUE;


    }

    $order_by = (array_key_exists('order', $_GET)) ? $_GET['order'] : '';
    $order = (array_key_exists('sort', $_GET)) ? $_GET['sort'] : '';

    foreach ($view->field as $field_name => $field) {
        if (!in_array($field_name, $field_to_avoid)) {
            if ($field_name == $order_by) {
                $query->add_orderby($field->table, $field->real_field, strtoupper($order));
            }
        }
    }
}

/**
 * Returns an unique DataTable id
 */
function _datatables_get_id() {
    static $datatable_id;
    return 'datatable-' . ++$datatable_id;
}

